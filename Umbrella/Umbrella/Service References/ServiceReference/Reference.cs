//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Umbrella.ServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference.IService", SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface IService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthorization/SignIn", ReplyAction="http://tempuri.org/IAuthorization/SignInResponse")]
        UmbrellaService.DataLevel.ProxyModel.AccountProxy SignIn(string login, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthorization/SignIn", ReplyAction="http://tempuri.org/IAuthorization/SignInResponse")]
        System.Threading.Tasks.Task<UmbrellaService.DataLevel.ProxyModel.AccountProxy> SignInAsync(string login, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthorization/SignUp", ReplyAction="http://tempuri.org/IAuthorization/SignUpResponse")]
        UmbrellaService.DataLevel.ProxyModel.AccountProxy SignUp(string login, string password, string email, string fullName, int age);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthorization/SignUp", ReplyAction="http://tempuri.org/IAuthorization/SignUpResponse")]
        System.Threading.Tasks.Task<UmbrellaService.DataLevel.ProxyModel.AccountProxy> SignUpAsync(string login, string password, string email, string fullName, int age);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthorization/LogOut", ReplyAction="http://tempuri.org/IAuthorization/LogOutResponse")]
        void LogOut(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthorization/LogOut", ReplyAction="http://tempuri.org/IAuthorization/LogOutResponse")]
        System.Threading.Tasks.Task LogOutAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectControl/CreateProject", ReplyAction="http://tempuri.org/IProjectControl/CreateProjectResponse")]
        UmbrellaService.DataLevel.ProxyModel.ProjectProxy CreateProject(int accountId, UmbrellaService.DataLevel.ProxyModel.ProjectProxy project);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectControl/CreateProject", ReplyAction="http://tempuri.org/IProjectControl/CreateProjectResponse")]
        System.Threading.Tasks.Task<UmbrellaService.DataLevel.ProxyModel.ProjectProxy> CreateProjectAsync(int accountId, UmbrellaService.DataLevel.ProxyModel.ProjectProxy project);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectControl/DeleteProjectById", ReplyAction="http://tempuri.org/IProjectControl/DeleteProjectByIdResponse")]
        void DeleteProjectById(int accountId, int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectControl/DeleteProjectById", ReplyAction="http://tempuri.org/IProjectControl/DeleteProjectByIdResponse")]
        System.Threading.Tasks.Task DeleteProjectByIdAsync(int accountId, int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectControl/UpdateProject", ReplyAction="http://tempuri.org/IProjectControl/UpdateProjectResponse")]
        void UpdateProject(int accountId, UmbrellaService.DataLevel.ProxyModel.ProjectProxy project);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectControl/UpdateProject", ReplyAction="http://tempuri.org/IProjectControl/UpdateProjectResponse")]
        System.Threading.Tasks.Task UpdateProjectAsync(int accountId, UmbrellaService.DataLevel.ProxyModel.ProjectProxy project);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectControl/ChangeProjectStatus", ReplyAction="http://tempuri.org/IProjectControl/ChangeProjectStatusResponse")]
        void ChangeProjectStatus(int accountId, int projectId, UmbrellaService.DataLevel.ProxyModel.ProjectStatusProxy status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectControl/ChangeProjectStatus", ReplyAction="http://tempuri.org/IProjectControl/ChangeProjectStatusResponse")]
        System.Threading.Tasks.Task ChangeProjectStatusAsync(int accountId, int projectId, UmbrellaService.DataLevel.ProxyModel.ProjectStatusProxy status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectControl/AddParticipant", ReplyAction="http://tempuri.org/IProjectControl/AddParticipantResponse")]
        bool AddParticipant(int accountId, int participantId, int projectId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectControl/AddParticipant", ReplyAction="http://tempuri.org/IProjectControl/AddParticipantResponse")]
        System.Threading.Tasks.Task<bool> AddParticipantAsync(int accountId, int participantId, int projectId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectControl/DeleteParticipant", ReplyAction="http://tempuri.org/IProjectControl/DeleteParticipantResponse")]
        void DeleteParticipant(int accountId, int participantId, int projectId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectControl/DeleteParticipant", ReplyAction="http://tempuri.org/IProjectControl/DeleteParticipantResponse")]
        System.Threading.Tasks.Task DeleteParticipantAsync(int accountId, int participantId, int projectId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectControl/GetProjectById", ReplyAction="http://tempuri.org/IProjectControl/GetProjectByIdResponse")]
        UmbrellaService.DataLevel.ProxyModel.ProjectProxy GetProjectById(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectControl/GetProjectById", ReplyAction="http://tempuri.org/IProjectControl/GetProjectByIdResponse")]
        System.Threading.Tasks.Task<UmbrellaService.DataLevel.ProxyModel.ProjectProxy> GetProjectByIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectControl/GetProjectsByOwnerId", ReplyAction="http://tempuri.org/IProjectControl/GetProjectsByOwnerIdResponse")]
        UmbrellaService.DataLevel.ProxyModel.ProjectProxy[] GetProjectsByOwnerId(int ownerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectControl/GetProjectsByOwnerId", ReplyAction="http://tempuri.org/IProjectControl/GetProjectsByOwnerIdResponse")]
        System.Threading.Tasks.Task<UmbrellaService.DataLevel.ProxyModel.ProjectProxy[]> GetProjectsByOwnerIdAsync(int ownerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectControl/GetProjectsByStatus", ReplyAction="http://tempuri.org/IProjectControl/GetProjectsByStatusResponse")]
        UmbrellaService.DataLevel.ProxyModel.ProjectProxy[] GetProjectsByStatus(UmbrellaService.DataLevel.ProxyModel.ProjectStatusProxy status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectControl/GetProjectsByStatus", ReplyAction="http://tempuri.org/IProjectControl/GetProjectsByStatusResponse")]
        System.Threading.Tasks.Task<UmbrellaService.DataLevel.ProxyModel.ProjectProxy[]> GetProjectsByStatusAsync(UmbrellaService.DataLevel.ProxyModel.ProjectStatusProxy status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectControl/GetProjectsInWhichParticipatesId", ReplyAction="http://tempuri.org/IProjectControl/GetProjectsInWhichParticipatesIdResponse")]
        UmbrellaService.DataLevel.ProxyModel.ProjectProxy[] GetProjectsInWhichParticipatesId(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectControl/GetProjectsInWhichParticipatesId", ReplyAction="http://tempuri.org/IProjectControl/GetProjectsInWhichParticipatesIdResponse")]
        System.Threading.Tasks.Task<UmbrellaService.DataLevel.ProxyModel.ProjectProxy[]> GetProjectsInWhichParticipatesIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITaskControl/CreateTask", ReplyAction="http://tempuri.org/ITaskControl/CreateTaskResponse")]
        UmbrellaService.DataLevel.ProxyModel.TaskProxy CreateTask(int accountId, UmbrellaService.DataLevel.ProxyModel.TaskProxy task);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITaskControl/CreateTask", ReplyAction="http://tempuri.org/ITaskControl/CreateTaskResponse")]
        System.Threading.Tasks.Task<UmbrellaService.DataLevel.ProxyModel.TaskProxy> CreateTaskAsync(int accountId, UmbrellaService.DataLevel.ProxyModel.TaskProxy task);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITaskControl/UpdateTask", ReplyAction="http://tempuri.org/ITaskControl/UpdateTaskResponse")]
        void UpdateTask(int accountId, UmbrellaService.DataLevel.ProxyModel.TaskProxy task);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITaskControl/UpdateTask", ReplyAction="http://tempuri.org/ITaskControl/UpdateTaskResponse")]
        System.Threading.Tasks.Task UpdateTaskAsync(int accountId, UmbrellaService.DataLevel.ProxyModel.TaskProxy task);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITaskControl/ChangeTaskStatus", ReplyAction="http://tempuri.org/ITaskControl/ChangeTaskStatusResponse")]
        void ChangeTaskStatus(int accountId, int taskId, UmbrellaService.DataLevel.ProxyModel.TaskStatusProxy status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITaskControl/ChangeTaskStatus", ReplyAction="http://tempuri.org/ITaskControl/ChangeTaskStatusResponse")]
        System.Threading.Tasks.Task ChangeTaskStatusAsync(int accountId, int taskId, UmbrellaService.DataLevel.ProxyModel.TaskStatusProxy status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITaskControl/DeleteTaskById", ReplyAction="http://tempuri.org/ITaskControl/DeleteTaskByIdResponse")]
        void DeleteTaskById(int accountId, int taskId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITaskControl/DeleteTaskById", ReplyAction="http://tempuri.org/ITaskControl/DeleteTaskByIdResponse")]
        System.Threading.Tasks.Task DeleteTaskByIdAsync(int accountId, int taskId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITaskControl/DeleteTasksByProjectId", ReplyAction="http://tempuri.org/ITaskControl/DeleteTasksByProjectIdResponse")]
        void DeleteTasksByProjectId(int projectId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITaskControl/DeleteTasksByProjectId", ReplyAction="http://tempuri.org/ITaskControl/DeleteTasksByProjectIdResponse")]
        System.Threading.Tasks.Task DeleteTasksByProjectIdAsync(int projectId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITaskControl/GetTaskById", ReplyAction="http://tempuri.org/ITaskControl/GetTaskByIdResponse")]
        UmbrellaService.DataLevel.ProxyModel.TaskProxy GetTaskById(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITaskControl/GetTaskById", ReplyAction="http://tempuri.org/ITaskControl/GetTaskByIdResponse")]
        System.Threading.Tasks.Task<UmbrellaService.DataLevel.ProxyModel.TaskProxy> GetTaskByIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITaskControl/GetTasksByProjectId", ReplyAction="http://tempuri.org/ITaskControl/GetTasksByProjectIdResponse")]
        UmbrellaService.DataLevel.ProxyModel.TaskProxy[] GetTasksByProjectId(int projectId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITaskControl/GetTasksByProjectId", ReplyAction="http://tempuri.org/ITaskControl/GetTasksByProjectIdResponse")]
        System.Threading.Tasks.Task<UmbrellaService.DataLevel.ProxyModel.TaskProxy[]> GetTasksByProjectIdAsync(int projectId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITaskControl/GetTasksByStatus", ReplyAction="http://tempuri.org/ITaskControl/GetTasksByStatusResponse")]
        UmbrellaService.DataLevel.ProxyModel.TaskProxy[] GetTasksByStatus(UmbrellaService.DataLevel.ProxyModel.TaskStatusProxy status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITaskControl/GetTasksByStatus", ReplyAction="http://tempuri.org/ITaskControl/GetTasksByStatusResponse")]
        System.Threading.Tasks.Task<UmbrellaService.DataLevel.ProxyModel.TaskProxy[]> GetTasksByStatusAsync(UmbrellaService.DataLevel.ProxyModel.TaskStatusProxy status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITaskControl/AddExecutor", ReplyAction="http://tempuri.org/ITaskControl/AddExecutorResponse")]
        bool AddExecutor(int accountId, int executorId, int taskId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITaskControl/AddExecutor", ReplyAction="http://tempuri.org/ITaskControl/AddExecutorResponse")]
        System.Threading.Tasks.Task<bool> AddExecutorAsync(int accountId, int executorId, int taskId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITaskControl/DeleteExecutor", ReplyAction="http://tempuri.org/ITaskControl/DeleteExecutorResponse")]
        void DeleteExecutor(int accountId, int executorId, int taskId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITaskControl/DeleteExecutor", ReplyAction="http://tempuri.org/ITaskControl/DeleteExecutorResponse")]
        System.Threading.Tasks.Task DeleteExecutorAsync(int accountId, int executorId, int taskId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITaskControl/GetTasksAvailableById", ReplyAction="http://tempuri.org/ITaskControl/GetTasksAvailableByIdResponse")]
        UmbrellaService.DataLevel.ProxyModel.TaskProxy[] GetTasksAvailableById(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITaskControl/GetTasksAvailableById", ReplyAction="http://tempuri.org/ITaskControl/GetTasksAvailableByIdResponse")]
        System.Threading.Tasks.Task<UmbrellaService.DataLevel.ProxyModel.TaskProxy[]> GetTasksAvailableByIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommentControl/CreateComment", ReplyAction="http://tempuri.org/ICommentControl/CreateCommentResponse")]
        UmbrellaService.DataLevel.ProxyModel.CommentProxy CreateComment(int accountId, UmbrellaService.DataLevel.ProxyModel.CommentProxy comment);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommentControl/CreateComment", ReplyAction="http://tempuri.org/ICommentControl/CreateCommentResponse")]
        System.Threading.Tasks.Task<UmbrellaService.DataLevel.ProxyModel.CommentProxy> CreateCommentAsync(int accountId, UmbrellaService.DataLevel.ProxyModel.CommentProxy comment);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommentControl/DeleteCommentById", ReplyAction="http://tempuri.org/ICommentControl/DeleteCommentByIdResponse")]
        void DeleteCommentById(int id, int accountId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommentControl/DeleteCommentById", ReplyAction="http://tempuri.org/ICommentControl/DeleteCommentByIdResponse")]
        System.Threading.Tasks.Task DeleteCommentByIdAsync(int id, int accountId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommentControl/DeleteCommentsByTaskId", ReplyAction="http://tempuri.org/ICommentControl/DeleteCommentsByTaskIdResponse")]
        void DeleteCommentsByTaskId(int taskId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommentControl/DeleteCommentsByTaskId", ReplyAction="http://tempuri.org/ICommentControl/DeleteCommentsByTaskIdResponse")]
        System.Threading.Tasks.Task DeleteCommentsByTaskIdAsync(int taskId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommentControl/GetCommentsByTaskId", ReplyAction="http://tempuri.org/ICommentControl/GetCommentsByTaskIdResponse")]
        UmbrellaService.DataLevel.ProxyModel.CommentProxy[] GetCommentsByTaskId(int taskId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommentControl/GetCommentsByTaskId", ReplyAction="http://tempuri.org/ICommentControl/GetCommentsByTaskIdResponse")]
        System.Threading.Tasks.Task<UmbrellaService.DataLevel.ProxyModel.CommentProxy[]> GetCommentsByTaskIdAsync(int taskId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountControl/GetAccountById", ReplyAction="http://tempuri.org/IAccountControl/GetAccountByIdResponse")]
        UmbrellaService.DataLevel.ProxyModel.AccountProxy GetAccountById(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountControl/GetAccountById", ReplyAction="http://tempuri.org/IAccountControl/GetAccountByIdResponse")]
        System.Threading.Tasks.Task<UmbrellaService.DataLevel.ProxyModel.AccountProxy> GetAccountByIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountControl/GetAllAccounts", ReplyAction="http://tempuri.org/IAccountControl/GetAllAccountsResponse")]
        UmbrellaService.DataLevel.ProxyModel.AccountProxy[] GetAllAccounts();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountControl/GetAllAccounts", ReplyAction="http://tempuri.org/IAccountControl/GetAllAccountsResponse")]
        System.Threading.Tasks.Task<UmbrellaService.DataLevel.ProxyModel.AccountProxy[]> GetAllAccountsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountControl/GetAccountListByProjectId", ReplyAction="http://tempuri.org/IAccountControl/GetAccountListByProjectIdResponse")]
        UmbrellaService.DataLevel.ProxyModel.AccountProxy[] GetAccountListByProjectId(int projectId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountControl/GetAccountListByProjectId", ReplyAction="http://tempuri.org/IAccountControl/GetAccountListByProjectIdResponse")]
        System.Threading.Tasks.Task<UmbrellaService.DataLevel.ProxyModel.AccountProxy[]> GetAccountListByProjectIdAsync(int projectId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountControl/GetAccountListByTaskId", ReplyAction="http://tempuri.org/IAccountControl/GetAccountListByTaskIdResponse")]
        UmbrellaService.DataLevel.ProxyModel.AccountProxy[] GetAccountListByTaskId(int taskId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountControl/GetAccountListByTaskId", ReplyAction="http://tempuri.org/IAccountControl/GetAccountListByTaskIdResponse")]
        System.Threading.Tasks.Task<UmbrellaService.DataLevel.ProxyModel.AccountProxy[]> GetAccountListByTaskIdAsync(int taskId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountControl/UpdateAccount", ReplyAction="http://tempuri.org/IAccountControl/UpdateAccountResponse")]
        void UpdateAccount(UmbrellaService.DataLevel.ProxyModel.AccountProxy account);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountControl/UpdateAccount", ReplyAction="http://tempuri.org/IAccountControl/UpdateAccountResponse")]
        System.Threading.Tasks.Task UpdateAccountAsync(UmbrellaService.DataLevel.ProxyModel.AccountProxy account);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStatusControl/CreateProjectStatus", ReplyAction="http://tempuri.org/IStatusControl/CreateProjectStatusResponse")]
        void CreateProjectStatus(int accountId, int projectId, UmbrellaService.DataLevel.ProxyModel.ProjectStatusProxy status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStatusControl/CreateProjectStatus", ReplyAction="http://tempuri.org/IStatusControl/CreateProjectStatusResponse")]
        System.Threading.Tasks.Task CreateProjectStatusAsync(int accountId, int projectId, UmbrellaService.DataLevel.ProxyModel.ProjectStatusProxy status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStatusControl/CreateTaskStatus", ReplyAction="http://tempuri.org/IStatusControl/CreateTaskStatusResponse")]
        void CreateTaskStatus(int accountId, int taskId, UmbrellaService.DataLevel.ProxyModel.TaskStatusProxy status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStatusControl/CreateTaskStatus", ReplyAction="http://tempuri.org/IStatusControl/CreateTaskStatusResponse")]
        System.Threading.Tasks.Task CreateTaskStatusAsync(int accountId, int taskId, UmbrellaService.DataLevel.ProxyModel.TaskStatusProxy status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStatusControl/DeleteProjectStatusById", ReplyAction="http://tempuri.org/IStatusControl/DeleteProjectStatusByIdResponse")]
        void DeleteProjectStatusById(int accountId, int statusId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStatusControl/DeleteProjectStatusById", ReplyAction="http://tempuri.org/IStatusControl/DeleteProjectStatusByIdResponse")]
        System.Threading.Tasks.Task DeleteProjectStatusByIdAsync(int accountId, int statusId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStatusControl/DeleteTaskStatusById", ReplyAction="http://tempuri.org/IStatusControl/DeleteTaskStatusByIdResponse")]
        void DeleteTaskStatusById(int accountId, int statusId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStatusControl/DeleteTaskStatusById", ReplyAction="http://tempuri.org/IStatusControl/DeleteTaskStatusByIdResponse")]
        System.Threading.Tasks.Task DeleteTaskStatusByIdAsync(int accountId, int statusId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStatusControl/DeleteProjectStatusByProjectId", ReplyAction="http://tempuri.org/IStatusControl/DeleteProjectStatusByProjectIdResponse")]
        void DeleteProjectStatusByProjectId(int projectId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStatusControl/DeleteProjectStatusByProjectId", ReplyAction="http://tempuri.org/IStatusControl/DeleteProjectStatusByProjectIdResponse")]
        System.Threading.Tasks.Task DeleteProjectStatusByProjectIdAsync(int projectId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStatusControl/DeleteTaskStatusByProjectId", ReplyAction="http://tempuri.org/IStatusControl/DeleteTaskStatusByProjectIdResponse")]
        void DeleteTaskStatusByProjectId(int projectId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStatusControl/DeleteTaskStatusByProjectId", ReplyAction="http://tempuri.org/IStatusControl/DeleteTaskStatusByProjectIdResponse")]
        System.Threading.Tasks.Task DeleteTaskStatusByProjectIdAsync(int projectId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStatusControl/GetProjectStatusListByProjectId", ReplyAction="http://tempuri.org/IStatusControl/GetProjectStatusListByProjectIdResponse")]
        UmbrellaService.DataLevel.ProxyModel.ProjectStatusProxy[] GetProjectStatusListByProjectId(int projectId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStatusControl/GetProjectStatusListByProjectId", ReplyAction="http://tempuri.org/IStatusControl/GetProjectStatusListByProjectIdResponse")]
        System.Threading.Tasks.Task<UmbrellaService.DataLevel.ProxyModel.ProjectStatusProxy[]> GetProjectStatusListByProjectIdAsync(int projectId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStatusControl/GetTaskStatusListByProjectId", ReplyAction="http://tempuri.org/IStatusControl/GetTaskStatusListByProjectIdResponse")]
        UmbrellaService.DataLevel.ProxyModel.TaskStatusProxy[] GetTaskStatusListByProjectId(int projectId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStatusControl/GetTaskStatusListByProjectId", ReplyAction="http://tempuri.org/IStatusControl/GetTaskStatusListByProjectIdResponse")]
        System.Threading.Tasks.Task<UmbrellaService.DataLevel.ProxyModel.TaskStatusProxy[]> GetTaskStatusListByProjectIdAsync(int projectId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHistoryControl/AddHistory", ReplyAction="http://tempuri.org/IHistoryControl/AddHistoryResponse")]
        void AddHistory(UmbrellaService.DataLevel.ProxyModel.HistoryProxy history, UmbrellaService.DataLevel.ProxyModel.AccountProxy[] readers);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHistoryControl/AddHistory", ReplyAction="http://tempuri.org/IHistoryControl/AddHistoryResponse")]
        System.Threading.Tasks.Task AddHistoryAsync(UmbrellaService.DataLevel.ProxyModel.HistoryProxy history, UmbrellaService.DataLevel.ProxyModel.AccountProxy[] readers);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHistoryControl/DeleteHistoryById", ReplyAction="http://tempuri.org/IHistoryControl/DeleteHistoryByIdResponse")]
        void DeleteHistoryById(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHistoryControl/DeleteHistoryById", ReplyAction="http://tempuri.org/IHistoryControl/DeleteHistoryByIdResponse")]
        System.Threading.Tasks.Task DeleteHistoryByIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHistoryControl/GetHistoryById", ReplyAction="http://tempuri.org/IHistoryControl/GetHistoryByIdResponse")]
        UmbrellaService.DataLevel.ProxyModel.HistoryProxy GetHistoryById(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHistoryControl/GetHistoryById", ReplyAction="http://tempuri.org/IHistoryControl/GetHistoryByIdResponse")]
        System.Threading.Tasks.Task<UmbrellaService.DataLevel.ProxyModel.HistoryProxy> GetHistoryByIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHistoryControl/GetAvalibleHistoryById", ReplyAction="http://tempuri.org/IHistoryControl/GetAvalibleHistoryByIdResponse")]
        UmbrellaService.DataLevel.ProxyModel.HistoryProxy[] GetAvalibleHistoryById(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHistoryControl/GetAvalibleHistoryById", ReplyAction="http://tempuri.org/IHistoryControl/GetAvalibleHistoryByIdResponse")]
        System.Threading.Tasks.Task<UmbrellaService.DataLevel.ProxyModel.HistoryProxy[]> GetAvalibleHistoryByIdAsync(int id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceChannel : Umbrella.ServiceReference.IService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceClient : System.ServiceModel.ClientBase<Umbrella.ServiceReference.IService>, Umbrella.ServiceReference.IService {
        
        public ServiceClient() {
        }
        
        public ServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public UmbrellaService.DataLevel.ProxyModel.AccountProxy SignIn(string login, string password) {
            return base.Channel.SignIn(login, password);
        }
        
        public System.Threading.Tasks.Task<UmbrellaService.DataLevel.ProxyModel.AccountProxy> SignInAsync(string login, string password) {
            return base.Channel.SignInAsync(login, password);
        }
        
        public UmbrellaService.DataLevel.ProxyModel.AccountProxy SignUp(string login, string password, string email, string fullName, int age) {
            return base.Channel.SignUp(login, password, email, fullName, age);
        }
        
        public System.Threading.Tasks.Task<UmbrellaService.DataLevel.ProxyModel.AccountProxy> SignUpAsync(string login, string password, string email, string fullName, int age) {
            return base.Channel.SignUpAsync(login, password, email, fullName, age);
        }
        
        public void LogOut(int id) {
            base.Channel.LogOut(id);
        }
        
        public System.Threading.Tasks.Task LogOutAsync(int id) {
            return base.Channel.LogOutAsync(id);
        }
        
        public UmbrellaService.DataLevel.ProxyModel.ProjectProxy CreateProject(int accountId, UmbrellaService.DataLevel.ProxyModel.ProjectProxy project) {
            return base.Channel.CreateProject(accountId, project);
        }
        
        public System.Threading.Tasks.Task<UmbrellaService.DataLevel.ProxyModel.ProjectProxy> CreateProjectAsync(int accountId, UmbrellaService.DataLevel.ProxyModel.ProjectProxy project) {
            return base.Channel.CreateProjectAsync(accountId, project);
        }
        
        public void DeleteProjectById(int accountId, int id) {
            base.Channel.DeleteProjectById(accountId, id);
        }
        
        public System.Threading.Tasks.Task DeleteProjectByIdAsync(int accountId, int id) {
            return base.Channel.DeleteProjectByIdAsync(accountId, id);
        }
        
        public void UpdateProject(int accountId, UmbrellaService.DataLevel.ProxyModel.ProjectProxy project) {
            base.Channel.UpdateProject(accountId, project);
        }
        
        public System.Threading.Tasks.Task UpdateProjectAsync(int accountId, UmbrellaService.DataLevel.ProxyModel.ProjectProxy project) {
            return base.Channel.UpdateProjectAsync(accountId, project);
        }
        
        public void ChangeProjectStatus(int accountId, int projectId, UmbrellaService.DataLevel.ProxyModel.ProjectStatusProxy status) {
            base.Channel.ChangeProjectStatus(accountId, projectId, status);
        }
        
        public System.Threading.Tasks.Task ChangeProjectStatusAsync(int accountId, int projectId, UmbrellaService.DataLevel.ProxyModel.ProjectStatusProxy status) {
            return base.Channel.ChangeProjectStatusAsync(accountId, projectId, status);
        }
        
        public bool AddParticipant(int accountId, int participantId, int projectId) {
            return base.Channel.AddParticipant(accountId, participantId, projectId);
        }
        
        public System.Threading.Tasks.Task<bool> AddParticipantAsync(int accountId, int participantId, int projectId) {
            return base.Channel.AddParticipantAsync(accountId, participantId, projectId);
        }
        
        public void DeleteParticipant(int accountId, int participantId, int projectId) {
            base.Channel.DeleteParticipant(accountId, participantId, projectId);
        }
        
        public System.Threading.Tasks.Task DeleteParticipantAsync(int accountId, int participantId, int projectId) {
            return base.Channel.DeleteParticipantAsync(accountId, participantId, projectId);
        }
        
        public UmbrellaService.DataLevel.ProxyModel.ProjectProxy GetProjectById(int id) {
            return base.Channel.GetProjectById(id);
        }
        
        public System.Threading.Tasks.Task<UmbrellaService.DataLevel.ProxyModel.ProjectProxy> GetProjectByIdAsync(int id) {
            return base.Channel.GetProjectByIdAsync(id);
        }
        
        public UmbrellaService.DataLevel.ProxyModel.ProjectProxy[] GetProjectsByOwnerId(int ownerId) {
            return base.Channel.GetProjectsByOwnerId(ownerId);
        }
        
        public System.Threading.Tasks.Task<UmbrellaService.DataLevel.ProxyModel.ProjectProxy[]> GetProjectsByOwnerIdAsync(int ownerId) {
            return base.Channel.GetProjectsByOwnerIdAsync(ownerId);
        }
        
        public UmbrellaService.DataLevel.ProxyModel.ProjectProxy[] GetProjectsByStatus(UmbrellaService.DataLevel.ProxyModel.ProjectStatusProxy status) {
            return base.Channel.GetProjectsByStatus(status);
        }
        
        public System.Threading.Tasks.Task<UmbrellaService.DataLevel.ProxyModel.ProjectProxy[]> GetProjectsByStatusAsync(UmbrellaService.DataLevel.ProxyModel.ProjectStatusProxy status) {
            return base.Channel.GetProjectsByStatusAsync(status);
        }
        
        public UmbrellaService.DataLevel.ProxyModel.ProjectProxy[] GetProjectsInWhichParticipatesId(int id) {
            return base.Channel.GetProjectsInWhichParticipatesId(id);
        }
        
        public System.Threading.Tasks.Task<UmbrellaService.DataLevel.ProxyModel.ProjectProxy[]> GetProjectsInWhichParticipatesIdAsync(int id) {
            return base.Channel.GetProjectsInWhichParticipatesIdAsync(id);
        }
        
        public UmbrellaService.DataLevel.ProxyModel.TaskProxy CreateTask(int accountId, UmbrellaService.DataLevel.ProxyModel.TaskProxy task) {
            return base.Channel.CreateTask(accountId, task);
        }
        
        public System.Threading.Tasks.Task<UmbrellaService.DataLevel.ProxyModel.TaskProxy> CreateTaskAsync(int accountId, UmbrellaService.DataLevel.ProxyModel.TaskProxy task) {
            return base.Channel.CreateTaskAsync(accountId, task);
        }
        
        public void UpdateTask(int accountId, UmbrellaService.DataLevel.ProxyModel.TaskProxy task) {
            base.Channel.UpdateTask(accountId, task);
        }
        
        public System.Threading.Tasks.Task UpdateTaskAsync(int accountId, UmbrellaService.DataLevel.ProxyModel.TaskProxy task) {
            return base.Channel.UpdateTaskAsync(accountId, task);
        }
        
        public void ChangeTaskStatus(int accountId, int taskId, UmbrellaService.DataLevel.ProxyModel.TaskStatusProxy status) {
            base.Channel.ChangeTaskStatus(accountId, taskId, status);
        }
        
        public System.Threading.Tasks.Task ChangeTaskStatusAsync(int accountId, int taskId, UmbrellaService.DataLevel.ProxyModel.TaskStatusProxy status) {
            return base.Channel.ChangeTaskStatusAsync(accountId, taskId, status);
        }
        
        public void DeleteTaskById(int accountId, int taskId) {
            base.Channel.DeleteTaskById(accountId, taskId);
        }
        
        public System.Threading.Tasks.Task DeleteTaskByIdAsync(int accountId, int taskId) {
            return base.Channel.DeleteTaskByIdAsync(accountId, taskId);
        }
        
        public void DeleteTasksByProjectId(int projectId) {
            base.Channel.DeleteTasksByProjectId(projectId);
        }
        
        public System.Threading.Tasks.Task DeleteTasksByProjectIdAsync(int projectId) {
            return base.Channel.DeleteTasksByProjectIdAsync(projectId);
        }
        
        public UmbrellaService.DataLevel.ProxyModel.TaskProxy GetTaskById(int id) {
            return base.Channel.GetTaskById(id);
        }
        
        public System.Threading.Tasks.Task<UmbrellaService.DataLevel.ProxyModel.TaskProxy> GetTaskByIdAsync(int id) {
            return base.Channel.GetTaskByIdAsync(id);
        }
        
        public UmbrellaService.DataLevel.ProxyModel.TaskProxy[] GetTasksByProjectId(int projectId) {
            return base.Channel.GetTasksByProjectId(projectId);
        }
        
        public System.Threading.Tasks.Task<UmbrellaService.DataLevel.ProxyModel.TaskProxy[]> GetTasksByProjectIdAsync(int projectId) {
            return base.Channel.GetTasksByProjectIdAsync(projectId);
        }
        
        public UmbrellaService.DataLevel.ProxyModel.TaskProxy[] GetTasksByStatus(UmbrellaService.DataLevel.ProxyModel.TaskStatusProxy status) {
            return base.Channel.GetTasksByStatus(status);
        }
        
        public System.Threading.Tasks.Task<UmbrellaService.DataLevel.ProxyModel.TaskProxy[]> GetTasksByStatusAsync(UmbrellaService.DataLevel.ProxyModel.TaskStatusProxy status) {
            return base.Channel.GetTasksByStatusAsync(status);
        }
        
        public bool AddExecutor(int accountId, int executorId, int taskId) {
            return base.Channel.AddExecutor(accountId, executorId, taskId);
        }
        
        public System.Threading.Tasks.Task<bool> AddExecutorAsync(int accountId, int executorId, int taskId) {
            return base.Channel.AddExecutorAsync(accountId, executorId, taskId);
        }
        
        public void DeleteExecutor(int accountId, int executorId, int taskId) {
            base.Channel.DeleteExecutor(accountId, executorId, taskId);
        }
        
        public System.Threading.Tasks.Task DeleteExecutorAsync(int accountId, int executorId, int taskId) {
            return base.Channel.DeleteExecutorAsync(accountId, executorId, taskId);
        }
        
        public UmbrellaService.DataLevel.ProxyModel.TaskProxy[] GetTasksAvailableById(int id) {
            return base.Channel.GetTasksAvailableById(id);
        }
        
        public System.Threading.Tasks.Task<UmbrellaService.DataLevel.ProxyModel.TaskProxy[]> GetTasksAvailableByIdAsync(int id) {
            return base.Channel.GetTasksAvailableByIdAsync(id);
        }
        
        public UmbrellaService.DataLevel.ProxyModel.CommentProxy CreateComment(int accountId, UmbrellaService.DataLevel.ProxyModel.CommentProxy comment) {
            return base.Channel.CreateComment(accountId, comment);
        }
        
        public System.Threading.Tasks.Task<UmbrellaService.DataLevel.ProxyModel.CommentProxy> CreateCommentAsync(int accountId, UmbrellaService.DataLevel.ProxyModel.CommentProxy comment) {
            return base.Channel.CreateCommentAsync(accountId, comment);
        }
        
        public void DeleteCommentById(int id, int accountId) {
            base.Channel.DeleteCommentById(id, accountId);
        }
        
        public System.Threading.Tasks.Task DeleteCommentByIdAsync(int id, int accountId) {
            return base.Channel.DeleteCommentByIdAsync(id, accountId);
        }
        
        public void DeleteCommentsByTaskId(int taskId) {
            base.Channel.DeleteCommentsByTaskId(taskId);
        }
        
        public System.Threading.Tasks.Task DeleteCommentsByTaskIdAsync(int taskId) {
            return base.Channel.DeleteCommentsByTaskIdAsync(taskId);
        }
        
        public UmbrellaService.DataLevel.ProxyModel.CommentProxy[] GetCommentsByTaskId(int taskId) {
            return base.Channel.GetCommentsByTaskId(taskId);
        }
        
        public System.Threading.Tasks.Task<UmbrellaService.DataLevel.ProxyModel.CommentProxy[]> GetCommentsByTaskIdAsync(int taskId) {
            return base.Channel.GetCommentsByTaskIdAsync(taskId);
        }
        
        public UmbrellaService.DataLevel.ProxyModel.AccountProxy GetAccountById(int id) {
            return base.Channel.GetAccountById(id);
        }
        
        public System.Threading.Tasks.Task<UmbrellaService.DataLevel.ProxyModel.AccountProxy> GetAccountByIdAsync(int id) {
            return base.Channel.GetAccountByIdAsync(id);
        }
        
        public UmbrellaService.DataLevel.ProxyModel.AccountProxy[] GetAllAccounts() {
            return base.Channel.GetAllAccounts();
        }
        
        public System.Threading.Tasks.Task<UmbrellaService.DataLevel.ProxyModel.AccountProxy[]> GetAllAccountsAsync() {
            return base.Channel.GetAllAccountsAsync();
        }
        
        public UmbrellaService.DataLevel.ProxyModel.AccountProxy[] GetAccountListByProjectId(int projectId) {
            return base.Channel.GetAccountListByProjectId(projectId);
        }
        
        public System.Threading.Tasks.Task<UmbrellaService.DataLevel.ProxyModel.AccountProxy[]> GetAccountListByProjectIdAsync(int projectId) {
            return base.Channel.GetAccountListByProjectIdAsync(projectId);
        }
        
        public UmbrellaService.DataLevel.ProxyModel.AccountProxy[] GetAccountListByTaskId(int taskId) {
            return base.Channel.GetAccountListByTaskId(taskId);
        }
        
        public System.Threading.Tasks.Task<UmbrellaService.DataLevel.ProxyModel.AccountProxy[]> GetAccountListByTaskIdAsync(int taskId) {
            return base.Channel.GetAccountListByTaskIdAsync(taskId);
        }
        
        public void UpdateAccount(UmbrellaService.DataLevel.ProxyModel.AccountProxy account) {
            base.Channel.UpdateAccount(account);
        }
        
        public System.Threading.Tasks.Task UpdateAccountAsync(UmbrellaService.DataLevel.ProxyModel.AccountProxy account) {
            return base.Channel.UpdateAccountAsync(account);
        }
        
        public void CreateProjectStatus(int accountId, int projectId, UmbrellaService.DataLevel.ProxyModel.ProjectStatusProxy status) {
            base.Channel.CreateProjectStatus(accountId, projectId, status);
        }
        
        public System.Threading.Tasks.Task CreateProjectStatusAsync(int accountId, int projectId, UmbrellaService.DataLevel.ProxyModel.ProjectStatusProxy status) {
            return base.Channel.CreateProjectStatusAsync(accountId, projectId, status);
        }
        
        public void CreateTaskStatus(int accountId, int taskId, UmbrellaService.DataLevel.ProxyModel.TaskStatusProxy status) {
            base.Channel.CreateTaskStatus(accountId, taskId, status);
        }
        
        public System.Threading.Tasks.Task CreateTaskStatusAsync(int accountId, int taskId, UmbrellaService.DataLevel.ProxyModel.TaskStatusProxy status) {
            return base.Channel.CreateTaskStatusAsync(accountId, taskId, status);
        }
        
        public void DeleteProjectStatusById(int accountId, int statusId) {
            base.Channel.DeleteProjectStatusById(accountId, statusId);
        }
        
        public System.Threading.Tasks.Task DeleteProjectStatusByIdAsync(int accountId, int statusId) {
            return base.Channel.DeleteProjectStatusByIdAsync(accountId, statusId);
        }
        
        public void DeleteTaskStatusById(int accountId, int statusId) {
            base.Channel.DeleteTaskStatusById(accountId, statusId);
        }
        
        public System.Threading.Tasks.Task DeleteTaskStatusByIdAsync(int accountId, int statusId) {
            return base.Channel.DeleteTaskStatusByIdAsync(accountId, statusId);
        }
        
        public void DeleteProjectStatusByProjectId(int projectId) {
            base.Channel.DeleteProjectStatusByProjectId(projectId);
        }
        
        public System.Threading.Tasks.Task DeleteProjectStatusByProjectIdAsync(int projectId) {
            return base.Channel.DeleteProjectStatusByProjectIdAsync(projectId);
        }
        
        public void DeleteTaskStatusByProjectId(int projectId) {
            base.Channel.DeleteTaskStatusByProjectId(projectId);
        }
        
        public System.Threading.Tasks.Task DeleteTaskStatusByProjectIdAsync(int projectId) {
            return base.Channel.DeleteTaskStatusByProjectIdAsync(projectId);
        }
        
        public UmbrellaService.DataLevel.ProxyModel.ProjectStatusProxy[] GetProjectStatusListByProjectId(int projectId) {
            return base.Channel.GetProjectStatusListByProjectId(projectId);
        }
        
        public System.Threading.Tasks.Task<UmbrellaService.DataLevel.ProxyModel.ProjectStatusProxy[]> GetProjectStatusListByProjectIdAsync(int projectId) {
            return base.Channel.GetProjectStatusListByProjectIdAsync(projectId);
        }
        
        public UmbrellaService.DataLevel.ProxyModel.TaskStatusProxy[] GetTaskStatusListByProjectId(int projectId) {
            return base.Channel.GetTaskStatusListByProjectId(projectId);
        }
        
        public System.Threading.Tasks.Task<UmbrellaService.DataLevel.ProxyModel.TaskStatusProxy[]> GetTaskStatusListByProjectIdAsync(int projectId) {
            return base.Channel.GetTaskStatusListByProjectIdAsync(projectId);
        }
        
        public void AddHistory(UmbrellaService.DataLevel.ProxyModel.HistoryProxy history, UmbrellaService.DataLevel.ProxyModel.AccountProxy[] readers) {
            base.Channel.AddHistory(history, readers);
        }
        
        public System.Threading.Tasks.Task AddHistoryAsync(UmbrellaService.DataLevel.ProxyModel.HistoryProxy history, UmbrellaService.DataLevel.ProxyModel.AccountProxy[] readers) {
            return base.Channel.AddHistoryAsync(history, readers);
        }
        
        public void DeleteHistoryById(int id) {
            base.Channel.DeleteHistoryById(id);
        }
        
        public System.Threading.Tasks.Task DeleteHistoryByIdAsync(int id) {
            return base.Channel.DeleteHistoryByIdAsync(id);
        }
        
        public UmbrellaService.DataLevel.ProxyModel.HistoryProxy GetHistoryById(int id) {
            return base.Channel.GetHistoryById(id);
        }
        
        public System.Threading.Tasks.Task<UmbrellaService.DataLevel.ProxyModel.HistoryProxy> GetHistoryByIdAsync(int id) {
            return base.Channel.GetHistoryByIdAsync(id);
        }
        
        public UmbrellaService.DataLevel.ProxyModel.HistoryProxy[] GetAvalibleHistoryById(int id) {
            return base.Channel.GetAvalibleHistoryById(id);
        }
        
        public System.Threading.Tasks.Task<UmbrellaService.DataLevel.ProxyModel.HistoryProxy[]> GetAvalibleHistoryByIdAsync(int id) {
            return base.Channel.GetAvalibleHistoryByIdAsync(id);
        }
    }
}
